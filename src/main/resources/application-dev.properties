# 개발 환경 설정
spring.application.name=fitmate

# 데이터베이스 설정 (개발용 - MySQL 사용)
spring.datasource.url=jdbc:mysql://mysql:3306/personalproject?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&useSchema=personalproject
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=fitmate_user
spring.datasource.password=fitmate_password

# JPA 설정
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Redis 설정 (Rate Limiting을 위해 활성화)
# Docker 환경에서는 환경변수 SPRING_DATA_REDIS_HOST=redis로 설정됨
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}
spring.data.redis.database=0
spring.data.redis.timeout=5000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.pool.max-wait=-1ms

# 이메일 설정 (Gmail) - 문자 인증으로 대체하여 주석처리
# spring.mail.host=smtp.gmail.com
# spring.mail.port=587
# spring.mail.username=pjh133765@gmail.com
# spring.mail.password=ktyj swuj zwnm ohia
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# JWT 설정
jwt.secret=fitmate_jwt_secret_key_2024_secure_and_long_enough_for_hmac_sha512_algorithm
jwt.expiration=86400000

# 로깅 설정
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.client=TRACE
logging.level.org.springframework.security.oauth2.client.endpoint=TRACE
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.backend.fitmate.config=DEBUG

# 서버 설정
server.port=8080
server.servlet.context-path=/

# 개발 환경 특화 설정
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# URL 설정
app.frontend.url=http://localhost
app.backend.url=http://localhost:8080

# ===== DataLoader 설정 (개발 환경에서는 활성화) =====
# DataLoader 활성화 여부 (개발 환경에서는 활성화)
data.loader.enabled=true
# 테스트 데이터 생성 여부 (개발 환경에서는 활성화)
data.loader.test-data.enabled=true
# 초기 데이터만 로드 (운동 데이터만, 테스트 데이터 제외)
data.loader.initial-data-only=false
# 강제로 데이터 리셋 (개발용 - 필요시만 true로 설정)
data.loader.force-reset=false



# ===== 스케줄러 설정 (개발 환경에서는 활성화) =====
# 스케줄러 활성화 여부
scheduler.enabled=true
# 운동 데이터 업데이트 스케줄 (매일 밤 2시)
scheduler.exercise.update.cron=0 0 2 * * ?

# ===== 소셜 로그인 설정 (개발 환경) =====

# Google OAuth2 설정
spring.security.oauth2.client.registration.google.client-id=581520849563-mragtke8gp7fdb83llmkhcdpnk2rrrg7.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri=${OAUTH_REDIRECT_URI:http://localhost/login/oauth2/code/google}

# Google OAuth2 (Calendar Connect) 별도 registration
spring.security.oauth2.client.registration.google-connect.client-id=581520849563-mragtke8gp7fdb83llmkhcdpnk2rrrg7.apps.googleusercontent.com
spring.security.oauth2.client.registration.google-connect.client-secret=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
spring.security.oauth2.client.registration.google-connect.scope=openid,email,profile,https://www.googleapis.com/auth/calendar.events.readonly,https://www.googleapis.com/auth/calendar.readonly
spring.security.oauth2.client.registration.google-connect.redirect-uri=${OAUTH_CONNECT_REDIRECT_URI:http://localhost/connect/oauth2/code/google-connect}
spring.security.oauth2.client.registration.google-connect.provider=google

# Google Calendar API 설정
google.calendar.application-name=FitMate Calendar API
google.calendar.tokens-directory-path=tokens

# Kakao OAuth2 설정
spring.security.oauth2.client.registration.kakao.client-id=d9172ea77330ceeeabb05429a4af6c36
spring.security.oauth2.client.registration.kakao.client-secret=T9sBn6aBQ3cOVqoIJRovqMCnbXTrIHyO
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.redirect-uri=${KAKAO_REDIRECT_URI:http://localhost/login/oauth2/code/kakao}
spring.security.oauth2.client.registration.kakao.client-name=Kakao

# Kakao Provider 설정
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Naver OAuth2 설정
spring.security.oauth2.client.registration.naver.client-id=Shnb5z_iDjpbIA67H7B_
spring.security.oauth2.client.registration.naver.client-secret=kU4BpAR_Gi
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email
spring.security.oauth2.client.registration.naver.redirect-uri=${NAVER_REDIRECT_URI:http://localhost/login/oauth2/code/naver}
spring.security.oauth2.client.registration.naver.client-name=Naver

# Naver Provider 설정
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# ===== Firebase 설정 (개발 환경) =====
# (클라이언트 사이드 사용)

